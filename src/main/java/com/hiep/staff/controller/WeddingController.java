package com.hiep.staff.controller;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.List;

import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.web.bind.annotation.*;

import com.hiep.staff.entity.WeddingEntity;
import com.hiep.staff.mapper.WeddingMapper;
import com.hiep.staff.model.WeddingModel;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("/api/wedding")
@CrossOrigin
public class WeddingController {

    @Autowired
    private WeddingMapper weddingMapper;

    @Autowired
    private JavaMailSender mailSender;

    @PostMapping("/accept-wedding")
    public List<WeddingEntity> insertAcceptWedding(@RequestBody WeddingModel weddingModel) {
        log.info("Nh·∫≠n request t·ª´ user: {}", weddingModel.getUser_name());

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (weddingModel.getUser_name() == null || weddingModel.getUser_name().trim().isEmpty()) {
            throw new IllegalArgumentException("T√™n ng∆∞·ªùi g·ª≠i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        }

        // L∆∞u l·ªùi ch√∫c v√†o database
        weddingMapper.insertAcceptWedding(weddingModel);
        log.info("ƒê√£ l∆∞u l·ªùi ch√∫c v√†o database: {}", weddingModel.getWish());

        // L·∫•y to√†n b·ªô danh s√°ch l·ªùi ch√∫c
        List<WeddingEntity> allWishes = weddingMapper.getAllWish();

        // G·ª≠i email th√¥ng b√°o
        sendMail(weddingModel.getUser_name(), allWishes);

        return allWishes;
    }

    private void sendMail(String userName, List<WeddingEntity> allWishes) {
        String recipientEmail = "hiepdeptrai0908@gmail.com";
        String subject = "üì© B·∫°n c√≥ m·ªôt l·ªùi ch√∫c m·ªõi t·ª´ " + userName;

        // X√¢y d·ª±ng n·ªôi dung email v·ªõi HTML
        StringBuilder messageContent = new StringBuilder();
        messageContent.append("<html><body>");
        messageContent.append("<p>üíå Danh s√°ch t·∫•t c·∫£ l·ªùi ch√∫c:</p>");
        
        // T·∫°o b·∫£ng HTML
        messageContent.append("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse; width: 100%;'>");
        messageContent.append("<tr><th>STT</th><th>T√™n</th><th>Ng∆∞·ªùi Th√¢n</th><th>L·ªùi Ch√∫c</th><th>Th·ªùi Gian</th><th>Tham D·ª±</th></tr>");
        
        // Th√™m c√°c h√†ng v√†o b·∫£ng
        int index = 1;
        for (WeddingEntity wish : allWishes) {
            // T√πy ch·ªânh relation
            String relation = wish.getRelation();
            if ("groom-bride".equals(relation)) {
                relation = "d√¢u - r·ªÉ";
            } else if ("groom".equals(relation)) {
                relation = "ch√∫ r·ªÉ";
            } else if ("bride".equals(relation)) {
                relation = "c√¥ d√¢u";
            }

            // Format th·ªùi gian 
            LocalDateTime time = wish.getCreated_at();
            String day = String.format("%02d", time.getDayOfMonth());  // Th√™m s·ªë 0 n·∫øu ng√†y < 10
            String month = String.format("%02d", time.getMonthValue());  // Th√™m s·ªë 0 n·∫øu th√°ng < 10
            String year = String.valueOf(time.getYear());
            String hour = String.format("%02d", time.getHour());  // Th√™m s·ªë 0 n·∫øu gi·ªù < 10
            String minute = String.format("%02d", time.getMinute());  // Th√™m s·ªë 0 n·∫øu ph√∫t < 10
            String formatTime = day + "-" + month + "-" + year + " " + hour + ":" + minute;

            // L·∫•y th√¥ng tin Tham D·ª± (attendance)
            String attendance = wish.getAttendance() != null ? wish.getAttendance() : "Kh√¥ng r√µ";

            // Th√™m v√†o b·∫£ng
            messageContent.append("<tr>")
                          .append("<td>").append(index++).append("</td>")
                          .append("<td>").append(wish.getUser_name()).append("</td>")
                          .append("<td>").append(relation).append("</td>")
                          .append("<td>").append(wish.getWish()).append("</td>")
                          .append("<td>").append(formatTime).append("</td>")
                          .append("<td>").append(attendance).append("</td>")
                          .append("</tr>");
        }
        messageContent.append("</table>");
        
        messageContent.append("</body></html>");

        // T·∫°o email d∆∞·ªõi d·∫°ng MimeMessage
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            
            helper.setTo(recipientEmail);
            helper.setSubject(subject);
            helper.setText(messageContent.toString(), true);  // true cho ph√©p g·ª≠i n·ªôi dung d·∫°ng HTML

            // G·ª≠i email
            mailSender.send(message);
            log.info("üìß Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: {}", recipientEmail);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email: {}", e.getMessage());
        }
    }

}
