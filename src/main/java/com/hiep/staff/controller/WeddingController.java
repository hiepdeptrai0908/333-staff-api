package com.hiep.staff.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hiep.staff.entity.WeddingEntity;
import com.hiep.staff.entity.WeddingViewerEntity;
import com.hiep.staff.mapper.WeddingMapper;
import com.hiep.staff.mapper.WeddingViewerMapper;
import com.hiep.staff.model.WeddingModel;
import com.hiep.staff.model.WeddingViewerModel;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("/api/wedding")
@CrossOrigin("*")
public class WeddingController {

    @Autowired
    private WeddingMapper weddingMapper;

    @Autowired
    private WeddingViewerMapper weddingViewerMapper;

    @Autowired
    private JavaMailSender mailSender;

    private static final Logger log = LoggerFactory.getLogger(WeddingController.class);

    /**
     * API: L∆∞u l·ªùi ch√∫c v√†o DB v√† g·ª≠i email th√¥ng b√°o
     */
    @PostMapping("/accept-wedding")
    public List<WeddingEntity> insertAcceptWedding(@RequestBody WeddingModel weddingModel) {
        log.info("Nh·∫≠n request t·ª´ user: {}", weddingModel.getUser_name());

        if (weddingModel.getUser_name() == null || weddingModel.getUser_name().trim().isEmpty()) {
            throw new IllegalArgumentException("T√™n ng∆∞·ªùi g·ª≠i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        }

        weddingMapper.insertAcceptWedding(weddingModel);
        log.info("ƒê√£ l∆∞u l·ªùi ch√∫c v√†o database: {}", weddingModel.getWish());

        List<WeddingEntity> allWishes = weddingMapper.getAllWish();
        sendMail(weddingModel.getUser_name(), allWishes);

        return allWishes;
    }

    /**
     * API: L∆∞u th√¥ng tin ng∆∞·ªùi d√πng khi h·ªç xem thi·ªáp
     */
    @PostMapping("/view-wedding")
    public List<WeddingViewerEntity> insertViewer(@RequestBody WeddingViewerModel viewerModel) {
        log.info("Ng∆∞·ªùi d√πng {} ƒëang xem thi·ªáp.", viewerModel.getUser_name());

        if (viewerModel.getUser_name() == null || viewerModel.getUser_name().trim().isEmpty()) {
            throw new IllegalArgumentException("T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        }

        // Chu·∫©n h√≥a gi√° tr·ªã relation tr∆∞·ªõc khi l∆∞u v√†o database
        String relation = viewerModel.getRelation();
        if ("bride".equalsIgnoreCase(relation)) {
            relation = "C√¥ D√¢u";
        } else if ("groom".equalsIgnoreCase(relation)) {
            relation = "Ch√∫ R·ªÉ";
        } else if ("groom-bride".equalsIgnoreCase(relation)) {
            relation = "D√¢u v√† R·ªÉ";
        }
        viewerModel.setRelation(relation);

        weddingViewerMapper.insertViewer(viewerModel);
        log.info("ƒê√£ l∆∞u th√¥ng tin ng∆∞·ªùi xem v√†o database: {} - Quan h·ªá: {}", viewerModel.getUser_name(), relation);

        List<WeddingViewerEntity> allViewers = weddingViewerMapper.getAllViewers();
        sendViewerMail(viewerModel.getUser_name(), allViewers);

        return allViewers;
    }

    /**
     * G·ª≠i email th√¥ng b√°o khi c√≥ ng∆∞·ªùi g·ª≠i l·ªùi ch√∫c
     */
    private void sendMail(String userName, List<WeddingEntity> allWishes) {
        String recipientEmail = "hiepdeptrai0908@gmail.com";
        String subject = "üì© B·∫°n c√≥ m·ªôt l·ªùi ch√∫c m·ªõi t·ª´ " + userName;

        StringBuilder messageContent = new StringBuilder();
        messageContent.append("<html><body>");
        messageContent.append("<p>N·ªôi dung:").append(allWishes.get(0).getWish()).append("</p>");
        messageContent.append("<br />");
        messageContent.append("<p>üíå Danh s√°ch t·∫•t c·∫£ l·ªùi ch√∫c:</p>");
        
        messageContent.append("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse; width: 100%;'>");
        messageContent.append("<tr><th>STT</th><th>T√™n</th><th>Ng∆∞·ªùi Th√¢n</th><th>L·ªùi Ch√∫c</th><th>Th·ªùi Gian</th><th>Tham D·ª±</th></tr>");
        
        int index = 1;
        for (WeddingEntity wish : allWishes) {
            String relation;
            switch (wish.getRelation()) {
                case "groom-bride":
                    relation = "d√¢u - r·ªÉ";
                    break;
                case "groom":
                    relation = "ch√∫ r·ªÉ";
                    break;
                case "bride":
                    relation = "c√¥ d√¢u";
                    break;
                default:
                    relation = wish.getRelation();
                    break;
            }

            LocalDateTime time = wish.getCreated_at();
            String formattedTime = time.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));

            String attendance = wish.getAttendance() != null ? wish.getAttendance() : "Kh√¥ng r√µ";

            messageContent.append("<tr>")
                          .append("<td>").append(index++).append("</td>")
                          .append("<td>").append(wish.getUser_name()).append("</td>")
                          .append("<td>").append(relation).append("</td>")
                          .append("<td>").append(wish.getWish()).append("</td>")
                          .append("<td>").append(formattedTime).append("</td>")
                          .append("<td>").append(attendance).append("</td>")
                          .append("</tr>");
        }
        messageContent.append("</table>");
        messageContent.append("</body></html>");

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            
            helper.setTo(recipientEmail);
            helper.setSubject(subject);
            helper.setText(messageContent.toString(), true);

            mailSender.send(message);
            log.info("üìß Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: {}", recipientEmail);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email: {}", e.getMessage());
        }
    }

    /**
     * G·ª≠i email khi c√≥ ng∆∞·ªùi xem thi·ªáp
     */
    private void sendViewerMail(String userName, List<WeddingViewerEntity> allViewers) {
        String recipientEmail = "hiepdeptrai0908@gmail.com";
        String subject = "üëÄ C√≥ ng∆∞·ªùi ƒëang xem thi·ªáp: " + userName;

        StringBuilder messageContent = new StringBuilder();
        messageContent.append("<html><body>");
        messageContent.append("<p>üìú Danh s√°ch ng∆∞·ªùi ƒë√£ xem thi·ªáp:</p>");
        messageContent.append("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse; width: 100%;'>");
        messageContent.append("<tr><th>STT</th><th>T√™n</th><th>Ng∆∞·ªùi Th√¢n</th><th>Th·ªùi Gian Xem</th></tr>");

        int index = 1;
        for (WeddingViewerEntity viewer : allViewers) {
            LocalDateTime time = viewer.getViewed_at();
            String formattedTime = time.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));

            messageContent.append("<tr>")
                          .append("<td>").append(index++).append("</td>")
                          .append("<td>").append(viewer.getUser_name()).append("</td>")
                          .append("<td>").append(viewer.getRelation()).append("</td>")
                          .append("<td>").append(formattedTime).append("</td>")
                          .append("</tr>");
        }
        messageContent.append("</table>");
        messageContent.append("</body></html>");

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);

            helper.setTo(recipientEmail);
            helper.setSubject(subject);
            helper.setText(messageContent.toString(), true);

            mailSender.send(message);
            log.info("üìß Email th√¥ng b√°o ng∆∞·ªùi xem thi·ªáp ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: {}", recipientEmail);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email th√¥ng b√°o ng∆∞·ªùi xem: {}", e.getMessage());
        }
    }
    
    @GetMapping("/delete-username/{user_name}")
    public String deleteViewerByUsername(@PathVariable String user_name) {
    	weddingViewerMapper.deleteViewer(user_name);
    	return "ƒê√£ xo√° ng∆∞·ªùi xem t√™n: " + user_name;
    }
    
    @GetMapping("/delete-id/{id}")
    public String deleteViewerById(@PathVariable Integer id) {
    	weddingViewerMapper.deleteViewerById(id);
    	return "ƒê√£ xo√° ng∆∞·ªùi xem c√≥ id l√†: " + id;
    }
    
    @GetMapping("/show-viewers")
    public List<WeddingViewerEntity> getAllViewers(){
    	return weddingViewerMapper.getAllViewers();
    }
}
